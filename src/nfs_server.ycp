/**
 * File:
 *   nfs_server.ycp
 *
 * Module:
 *   Configuration of nfs_server
 *
 * Summary:
 *   Module for the configuration of the nfs server
 *
 * Authors:
 *   Jan Holesovsky <kendy@suse.cz>
 *   Dan Vesely <dan@suse.cz>
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 * Module for the configuration of the nfs server
 */

/***
 * <h3>Configuration of the nfs_server</h3>
 */

{

    textdomain "nfs_server";

    import "CommandLine";
    // FIXME also apply to autoyast part,
    // must be able to query packages in selections
    import "NfsServer";
    import "Package";
    import "Report";
    import "RichText";
    import "Sequencer";
    import "Wizard";

    include "nfs_server/ui.ycp";

/**
 * GUI handler
 * @return `ws_finish `back or `abort
 */
define any NfsServerSequence () {

    map Aliases = $[
	"begin"   : ``(BeginDialog ()),
	"exports"   : ``(ExportsDialog ()),
	];

    map Sequence = $[
	"ws_start"  : "begin",
	"begin"     : $[
	    `next   : "exports",
	    `finish : `ws_finish,
	    `abort  : `abort
	    ],
	"exports"       : $[
	    `next   : `ws_finish,
	    `abort  : `abort
	    ],
	];

    // If nfs-utils nor nfs-server is not installed, install nfs-utils.
    // TODO: require installation of alternate packages
    if (!Package::Installed ("nfs-server"))
    {
	use_star_for_anonymous = true;
	spaces_allowed = true;
	if (!Package::InstallAll (NfsServer::required_packages))
	{
	    return nil;
	}
    }

    if (! NfsServer::Read ())
    {
	y2error ("read error, bye");
	return nil;
    }

    CheckSyntaxErrors (NfsServer::exports);

    Wizard::CreateDialog ();
    Wizard::SetDesktopIcon("nfs_server");

    any result = Sequencer::Run(Aliases, Sequence);

    if (result == `ws_finish)
    {
	NfsServer::Write();
    }

    UI::CloseDialog();
    return result;
}

/**
 * CLI action handler.
 * Print summary in command line
 * @param options command options
 * @return false so that Write is not called in non-interactive mode
 */
define boolean NfsServerSummaryHandler (map options) {

    if (NfsServer::start)
	// summary text
	CommandLine::Print (_("NFS server is enabled"));
    else
	// summary text
	CommandLine::Print (_("NFS server is disabled"));

    CommandLine::Print (RichText::Rich2Plain (NfsServer::Summary ()));
    return false;
}

/**
 * check if neccessary packages are installed
 * Report error if not
 * @return success?
 */
define boolean check_packages () {

    list<string> packages = add (NfsServer::required_packages, "nfs-server");
    if (!Package::InstalledAny (packages))
    {
	// error message
	Report::Error (sformat (_("Required packages (%1) are not installed."),
	    mergestring (NfsServer::required_packages, ",")));
	return false;
    }
    return true;
}

/**
 * CLI action handler.
 * @param options command options
 * @return whether successful
 */
define boolean NfsServerStartHandler (map options) {

    if (NfsServer::start)
	return false;
    if (!check_packages ())
	return false;
    NfsServer::start	= true;
    return true;
}

/**
 * CLI action handler.
 * @param options command options
 * @return whether successful
 */
define boolean NfsServerStopHandler (map options) {

    if (!NfsServer::start)
	return false;
    NfsServer::start	= false;
    return true;
}

/**
 * CLI action handler.
 * @param options command options
 * @return whether successful
 */
define boolean NfsServerAddHandler (map options) {


    if (!check_packages ())
	return false;

    string mountpoint	= options["mountpoint"]:"";
    if (mountpoint == "")
    {
	// error
	CommandLine::Print (_("No mount point specified."));
	return false;
    }
    list<map<string,any> > exports = NfsServer::exports;
    if (FindAllowed (exports, mountpoint) != nil)
    {
	Report::Message(_("The exports table already
contains this directory."));
	return false;
    }
    string host	= options["hosts"]:"";
    if (host == "")
	host	= use_star_for_anonymous? "*":"";
    string opts	= options["options"]:"";
    if (opts == "")
	opts	= default_options;
    list default_allowed = [ sformat ("%1(%2)", host, opts) ];
    exports = add (exports, $[
	"mountpoint" : mountpoint,
	"allowed"    : default_allowed
    ]);
    if (!CheckNoSpaces (host) || !CheckExportOptions (opts))
	return false;
    NfsServer::exports = exports;
    return true;
}

/**
 * CLI action handler.
 * @param options command options
 * @return whether successful
 */
define boolean NfsServerDeleteHandler (map options) {

    string mountpoint	= options["mountpoint"]:"";
    if (mountpoint == "")
    {
	// error
	CommandLine::Print (_("No mount point specified."));
	return false;
    }
    boolean deleted	= false;
    NfsServer::exports = filter (map<string,any> entry, NfsServer::exports, {
        if (entry["mountpoint"]:"" != mountpoint)
	    return true;
	else
	{
	    deleted	= true;
	    return false;
	}
    });

    return deleted;
}

/**
 * CLI action handler.
 * @param options command options
 * @return whether successful
 */
define boolean NfsServerSetOptionHandler (map options) {

    string nfs_sec = options["security"]:"";
    string v4domain = options["domain"]:"";
    string enablev4 = options["enablev4"]:"";

    if (nfs_sec == "yes")
	NfsServer::nfs_security = true;
    if (nfs_sec == "no")
	NfsServer::nfs_security = false;

    if (enablev4 == "yes")
	NfsServer::enable_nfsv4 = true;
    if (enablev4 == "no")
	NfsServer::enable_nfsv4 = false;

    if (v4domain != "") {
	if (!NfsServer::enable_nfsv4) {
	    CommandLine::Print(_("Domain can not be set without enabling NFSv4. Please use 'set enablev4' command."));
	    return false;
	}
	NfsServer::domain = v4domain;
    }

    if (nfs_sec == "" && enablev4 == "" && v4domain == "") {
	CommandLine::Print(_("Command set must be used as in 'set option=value'. Please use 'set help' to know the options."));
	return false;
    }

    return true;
}


map cmdline_description = $[
    "id"		: "nfs-server",
    /* Command line help text for the nfs-server module */
    "help"		: _("Configuration of NFS server"),
    "guihandler"        : NfsServerSequence,
    "initialize"        : NfsServer::Read,
    "finish"            : NfsServer::Write,
    "actions"           : $[
	"summary"	: $[
	    "handler"	: NfsServerSummaryHandler,
	    // command line action help
	    "help"	: _("NFS server configuration summary"),
	],
	"start"		: $[
	    "handler"	: NfsServerStartHandler,
	    "help"	: _("Start NFS server"),
	],
	"stop"		: $[
	    "handler"	: NfsServerStopHandler,
	    "help"	: _("Stop NFS server"),
	],
	"add"		: $[
	    "handler"	: NfsServerAddHandler,
	    "help"      : _("Add a directory to export"),
	],
	"delete"	: $[
	    "handler"	: NfsServerDeleteHandler,
	    "help"      : _("Delete a directory from export"),
	],
	"set"		: $[
	    "handler"	: NfsServerSetOptionHandler,
	    "help"	: _("Set parameters - domain, security and enablev4"),
	]
    ],
    "options"		: $[
	"mountpoint"	: $[
	    "type"	: "string",
	    "help"	: _("Directory to export"),
	],
	"hosts"		: $[
	    "type"	: "string",
	    "help"	: _("Host wild card for setting the access to directory"),
	],
	"options"	: $[
	    "type"	: "string",
	    // command line option help (do not transl. 'man exports')
	    "help"	: _("Export options (see 'man exports')"),
	],
	"domain"	: $[
	    "type"	: "string",
	    "help"	: _("Domain specification for NFSv4 Idmapping, such as 'localdomain' or 'abc.com' etc."),
	],
	"enablev4"	: $[
	    "type"	: "string",
	    "help"	: _("Yes/No option for enabling/disabling support for NFSv4"),
	],
	"security"	: $[
	    "type"	: "string",
	    "help"	: _("Yes/No option for enabling/disabling secure NFS"),
	]
    ],
    "mappings"		: $[
	"summary"	: [],
	"start"		: [],
	"stop"		: [],
	"add"		: [ "mountpoint", "hosts", "options" ],
	"delete"	: [ "mountpoint" ],
	"set"		: [ "enablev4", "domain", "security"]
    ]
];

/* main ui function */
any ret = nil;

ret = CommandLine::Run (cmdline_description);
y2debug("ret=%1", ret);

/* Finish */
y2milestone("NFS module finished");
y2milestone("----------------------------------------");

return ret;

}
