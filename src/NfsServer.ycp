/**
 * File:
 *   modules/NfsServer.ycp
 *
 * Module:
 *   Configuration of nfs_server
 *
 * Summary:
 *   NFS server configuration data, I/O functions.
 *
 * Authors:
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 */

{
    module "NfsServer";
    textdomain "nfs_server";

    import "Runlevel";
    import "Report";
    import "Summary";



	/**
	 * Write only, used during autoinstallation.
	 * Don't run services and SuSEconfig, it's all done at one place.
	 */
	global boolean write_only = false;


    /**
     * Should the server be started?
     * If false, the exports file will not be touched.
     */
    global boolean start = false;

    /**
     * @example
     * [
     *   $[
     *     "mountpoint": "/projects",
     *     "allowed": [ "*.local.domain(ro)", "@trusted(rw)"]
     *   ],
     *   $[ ... ],
     *   ...
     * ]
     *
     */
    global list(map) exports = [];

    /**
     * Do we have nfslock? (nis-utils: yes, nis-server: no
     */
    boolean have_nfslock = true;

    /**
     * Get all NFS server configuration from a map.
     * When called by nfs_server_auto (preparing autoinstallation data)
     * the map may be empty.
     * @param settings	$["start": "exports":]
     * @return	success
     * @see	exports
     */
    global define boolean Import (map settings) ``{
	if (size (settings) == 0)
	{
	    return true;
	}

	Set (settings);
	return true;
    }

    /**
     * Set the variables just as is and without complaining
     * @param  settings
     * @return void
     */
    global define void Set (map settings)
	``{
	start = lookup (settings, "start_nfsserver", false);
	exports = lookup (settings, "nfs_exports", []);
	return;
    }


    /**
     * Dump the NFS settings to a map, for autoinstallation use.
     * @return	$["start": "exports":]
     * @see	exports
     */
    global define map Export () ``{
	return $[
	    "start_nfsserver": start,
	    "nfs_exports": exports,
	    ];
    }

    /**
     * Reads NFS settings from the SCR (.etc.exports)
     * @return true on success
     */
    global define boolean Read () ``{
	start = Runlevel::ServiceEnabled ("nfsserver");
	exports = SCR::Read (.etc.exports);
	have_nfslock = SCR::Read (.init.scripts.exists, "nfslock");

	return exports != nillist;
    }


    /**
     * Saves NFS server configuration. (exports(5))
     * Creates any missing directories.
     * @return true on success
     */
    global define boolean Write () ``{
	// if there is still work to do, don't return false immediately
	// but remember the error
	boolean ok = true;

	if (!start)
	{
		if (!write_only)
			Runlevel::RunInitScript ("nfsserver", "stop");
	    if (! Runlevel::ServiceAdjust ("nfsserver", "disable"))
	    {
		Report::Error (Runlevel::error_msg);
		ok = false;
	    }
	    if (have_nfslock)
	    {
		if (!write_only)
			Runlevel::RunInitScript ("nfslock", "stop");
		if (! Runlevel::ServiceAdjust ("nfslock", "disable"))
		{
		    Report::Error (Runlevel::error_msg);
		    ok = false;
		}
	    }
	}
	else
	{
	    // create missing directories.
	    foreach (map entry, exports, ``{
		string directory = entry["mountpoint"]:nil;
		if (SCR::Read (.target.dir, directory) == nil)
		{
		    if (! SCR::Execute (.target.mkdir, directory))
		    {
			// not fatal - write other dirs.
			Report::Warning (sformat(_("Unable to create a missing directory:\n%1"), directory));
		    }
		}
	    });

	    // (the backup is now done by the agent)
	    if (! SCR::Write(.etc.exports, exports))
	    {
		// error popup message
		Report::Error (_("Unable to write to /etc/exports.
No changes will be made to the
exported directories.\n"));
		return false;
	    }

	    if (! Runlevel::ServiceAdjust ("portmap", "enable"))
	    {
		Report::Error (Runlevel::error_msg);
		ok = false;
	    }
	    if (have_nfslock)
	    {
		if (! Runlevel::ServiceAdjust ("nfslock", "enable"))
		{
		    Report::Error (Runlevel::error_msg);
		    ok = false;
		}
	    }
	    if (! Runlevel::ServiceAdjust ("nfsserver", "enable"))
	    {
		Report::Error (Runlevel::error_msg);
		ok = false;
	    }

		if (!write_only)
		{
			if (Runlevel::ServiceStatus ("portmap") != 0 )
			{
			// portmap must not be started if it is running already (see bug # 9999)
				Runlevel::RunInitScript ("portmap", "start");
			}

			Runlevel::RunInitScript ("nfsserver", "stop");
			if (have_nfslock)
			{
				Runlevel::RunInitScript ("nfslock", "restart");
			}
			Runlevel::RunInitScript ("nfsserver", "start");

			if (Runlevel::ServiceStatus ("nfsserver") != 0)
			{
				// error popup message
				Report::Error (_("Unable to restart the NFS server.
Your changes will be active after reboot.
"));
				ok = false;
			}
		}
	}

	return ok;
    }

    /**
     * @return A summary for autoyast
     */
    global define string Summary() ``{
	string summary = "";
	// summary header; directories exported by NFS
	summary = Summary::AddHeader (summary, _("NFS Exports"));
	if (size (exports) > 0)
	{
	    foreach(map e, exports, ``{
		summary = Summary::OpenList (summary);
		summary = Summary::AddListItem (summary, e["mountpoint"]:"");
		summary = Summary::CloseList (summary);
	    });
	}
	else
	{
	    summary = Summary::AddLine (summary, Summary::NotConfigured ());
	}
	return summary;
    }

  /* The end of the definitions */

}
