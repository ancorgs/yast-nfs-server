/**
 * File:
 *   routines.ycp
 *
 * Module:
 *   Configuration of nfs server
 *
 * Summary:
 *   Network NFS routines
 *
 * Authors:
 *   Jan Holesovsky <kendy@suse.cz>
 *   Dan Vesely <dan@suse.cz>
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 * Network NFS routines
 *
 */

{
    textdomain "nfs_server";

    /**
     * Split the allowed host specification
     * @param hosts "hosts(opts)"
     * @return term `couple("hosts", "opts")
     */
    global define AllowedToHostsOpts(string hosts) ``{
	integer  brpos = findfirstof(hosts, "(");
	string opts = "";
	if (brpos != nil) {
	    opts = substring(hosts, brpos+1);
	    hosts = substring(hosts, 0, brpos);

	    brpos = findfirstof(opts, ")");
	    if (brpos != nil)
		opts = substring(opts, 0, brpos);
	}
	return [ hosts, opts ];
    };

    /**
     * @param allowed a list of allowed host specifications
     * @return list a ui table list of items
     * @example AllowedTableItems (["*.local.domain(ro)", "@trusted(rw)"])
     */
    global define AllowedTableItems(list allowed) ``{
	integer count = 0;
	return maplist(`str, allowed, ``{
	    list sp = AllowedToHostsOpts(str);
	    term it = `item(`id(count), select(sp, 0)+" ", select(sp, 1)+" ");

	    count = count+1;
	    return it;
	});
    };

    /**
     * Find entry in exports according to the mountpoint
     * @param exports list of exports
     * @param mp mount point
     * @return list a list of allowed host specifications or nil if not found
     */
    global define FindAllowed(list exports, string mp) ``{
	list flt = filter(`ent, exports, ``{
	    return (lookup(ent, "mountpoint") == mp);
	});
	if (flt == nil || size(flt) == 0)
	    return nil;

	return lookup(select(flt, 0), "allowed");
    };

    /**
     * @param exports	list of exports
     * @return list	a ui table list of mountpoints, id'ed by themselves
     */
    global define ExportsItems(list exports) ``{
	return maplist(`entry, exports, ``{
	    string str = lookup(entry, "mountpoint");
	    return `item(`id(str), str+" ");
	});
    };

    /**
     * @param exports	list of exports
     * @return term	a SelectionBox for the mountpoints, `id(`exportsbox)
     */
    global define ExportsSelBox(list exports) ``{
	// selection box label
	return `SelectionBox(`id(`exportsbox), `opt(`notify),
			     _("Di&rectories"), ExportsItems(exports));
    };

    // duplicated in nfs/routines.ycp and nfs_server/routines.ycp
    /**
     * Check for the validity of a path/mountpoint:
     * nonempty, fewer than 70 chars, no blanks, starts with a slash.
     * If invalid, a message is displayed.
     * @param name	path
     * @return boolean	whether valid
     */
    global define CheckPath(string name) ``{
	if (size(name) > 0 &&
	    size(name) < 70 &&
	    substring(name, 0, 1) == "/" &&
	    findfirstof(name, " \t") == nil)
	    return true;
	else
	    // error popup message
	    UI::MessagePopup(sformat(_("You entered a wrong path. It must be
shorter than 70 characters, it must begin
with a / and it must not contain spaces.")));
	return false;
    };

    /**
     * Check for the validity of options or hosts wildcard
     * nonempty, fewer than 70 chars, no blanks.
     * If invalid, a message is displayed.
     * @param name	options
     * @return boolean	whether valid
     */
    global define CheckNoSpaces(string name) ``{
	if (size(name) > 0 &&
	    size(name) < 70 &&
	    findfirstof(name, " \t") == nil)
	    return true;
	else
	    // error popup message
	    UI::MessagePopup(sformat(_("You entered a wrong wildcard or options string.
It must be shorter than 70 characters and it
must not contain spaces.")));
	return false;
    };

    /**
     * Replaces 'allowed' list in exports (for specified mountpoint)
     * @param exports		exports list
     * @param mountpoint	mount point
     * @param allowed		new allowed host list for that mout point
     * @return list		modified exports list
     */
    global define ReplaceInExports(list exports, string mountpoint, list allowed) ``{
	return maplist(`entry, exports, ``{
	    if (lookup(entry, "mountpoint") == mountpoint)
		entry = add(entry, "allowed", allowed);
	    return entry;
	});
    };

}
